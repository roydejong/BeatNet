using System.Diagnostics;
using System.Text;
using BeatNet.CodeGen.Analysis.ResultData;
using BeatNet.CodeGen.Generator.Util;

namespace BeatNet.CodeGen.Generator;

public class NetSerializableGenerator
{
    public readonly NetSerializableResult NetSerializable;
    
    public NetSerializableGenerator(NetSerializableResult netSerializable)
    {
        NetSerializable = netSerializable;
    }

    public void Generate(GeneratorSettings gs)
    {
        if (NetSerializable.Fields.Count == 0)
            return;
        
        var targetNamespace = $"{gs.BaseNamespace}.NetSerializable";
        var targetDir = Path.Combine(gs.OutputPath, "NetSerializable");
        
        if (!Directory.Exists(targetDir))
            Directory.CreateDirectory(targetDir);
        
        var targetFile = Path.Combine(targetDir, $"{NetSerializable.TypeName}.cs");
        
        using var sw = new StreamWriter(targetFile);
        
        // Header, usings, namespace, class declaration
        sw.WriteLine("// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)");
        sw.WriteLine("// Do not modify manually");
        sw.WriteLine();
        sw.WriteLine("using System;");
        sw.WriteLine("using BeatNet.Lib.Net.Interfaces;");
        sw.WriteLine("using BeatNet.Lib.Net.IO;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Common;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.Enum;");
        sw.WriteLine();
        sw.WriteLine($"namespace {targetNamespace};");
        sw.WriteLine();
        sw.WriteLine($"// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global");
        sw.WriteLine($"public sealed class {NetSerializable.TypeName} : INetSerializable");
        sw.WriteLine("{");
        sw.WriteLine(
            FieldGenerator.GenerateFields(NetSerializable)
        );
        sw.WriteLine(
            ConstructorGenerator.GenerateConstructor(NetSerializable)
        );
        sw.Write(
            ReadWriteMethodGenerator.GenerateMethods(NetSerializable)
        );
        sw.Write("}");
        sw.Close();
    }
}