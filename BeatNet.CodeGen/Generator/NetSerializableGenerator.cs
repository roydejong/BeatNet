using System.Diagnostics;
using System.Text;
using BeatNet.CodeGen.Analysis.ResultData;

namespace BeatNet.CodeGen.Generator;

public class NetSerializableGenerator
{
    public readonly NetSerializableResult NetSerializable;
    
    public NetSerializableGenerator(NetSerializableResult netSerializable)
    {
        NetSerializable = netSerializable;
    }

    public void Generate(GeneratorSettings gs)
    {
        if (NetSerializable.Fields.Count == 0)
            return;
        
        var targetNamespace = $"{gs.BaseNamespace}.NetSerializable";
        var targetDir = Path.Combine(gs.OutputPath, "NetSerializable");
        
        if (!Directory.Exists(targetDir))
            Directory.CreateDirectory(targetDir);
        
        var targetFile = Path.Combine(targetDir, $"{NetSerializable.TypeName}.cs");
        
        using var sw = new StreamWriter(targetFile);
        
        // Header, usings, namespace, class declaration
        sw.WriteLine("// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)");
        sw.WriteLine("// Do not modify manually");
        sw.WriteLine();
        sw.WriteLine("using System;");
        sw.WriteLine("using BeatNet.Lib.Net;");
        sw.WriteLine("using BeatNet.Lib.Net.IO;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Common;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.Enum;");
        sw.WriteLine();
        sw.WriteLine($"namespace {targetNamespace};");
        sw.WriteLine();
        sw.WriteLine($"// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global");
        sw.WriteLine();
        
        sw.WriteLine($"public sealed class {NetSerializable.TypeName} : INetSerializable");
        sw.WriteLine("{");
        
        // RPC Params & Constructor w/ params
        var constructorBuffer = new StringBuilder();
        var constructorBodyBuffer = new StringBuilder();
        
        constructorBuffer.Append($"\tpublic {NetSerializable.TypeName}(");

        var paramNo = 0;
        foreach (var field in NetSerializable.Fields.Values)
        {
            if (field.TypeName.Contains("PacketPool"))
                // Ignore static pools from the game
                continue;

            if (field.ParamNameForField == NetSerializable.TypeName)
                // Avoid "Member names cannot be the same as their enclosing type"
                field.ParamName += "Value";
            
            sw.WriteLine($"\tpublic {field.TypeName} {field.ParamNameForField} {{ get; set; }}");
            
            if (paramNo > 0)
                constructorBuffer.Append(", ");
            
            constructorBuffer.Append($"{field.TypeName} {field.ParamNameForArg}");
            constructorBodyBuffer.AppendLine($"\t\t{field.ParamNameForField} = {field.ParamNameForArg};");
            
            paramNo++;
        }
        
        sw.WriteLine();
        constructorBuffer.AppendLine(")");
        constructorBuffer.AppendLine($"\t{{");
        constructorBuffer.Append(constructorBodyBuffer);
        constructorBuffer.AppendLine($"\t}}");
        sw.WriteLine(constructorBuffer);
        
        // Read/write methods
        var anyInstructions = NetSerializable.DeserializeInstructions.Count > 0;
        
        var writeCodeBuffer = new StringBuilder();
        writeCodeBuffer.AppendLine("\tpublic void WriteTo(ref NetWriter writer)");
        writeCodeBuffer.AppendLine("\t{");
        
        var readCodeBuffer = new StringBuilder();
        readCodeBuffer.AppendLine("\tpublic void ReadFrom(ref NetReader reader)");
        readCodeBuffer.AppendLine("\t{");
        
        if (anyInstructions)
        {
            for (var instructionIdx = 0; instructionIdx < NetSerializable.DeserializeInstructions.Count; instructionIdx++)
            {
                var instruction = NetSerializable.DeserializeInstructions.ElementAt(instructionIdx);
                var linkedField = NetSerializable.Fields.Values.FirstOrDefault(field => 
                    field.ParamNameForField == instruction.FieldName || field.ParamName == instruction.FieldName);

                if (linkedField == null)
                { 
                    Debugger.Break();
                    writeCodeBuffer.AppendLine($"\t\t// TODO Bad Field Ref: {instruction.FieldName}");
                    readCodeBuffer.AppendLine($"\t\t// TODO Bad Field Ref: {instruction.FieldName}");
                    continue;
                }
                
                var rwMethod = $"Serializable<{linkedField.TypeName}>";
                switch (instruction.CallType)
                {
                    case "GetVarULong();":
                        rwMethod = "VarULong";
                        break;
                    case "GetVarUInt();":
                        rwMethod = "VarUInt";
                        break;
                    case "GetVarLong();":
                        rwMethod = "VarLong";
                        break;
                    case "GetVarInt();":
                        rwMethod = "VarInt";
                        break;
                    case "GetString();":
                        rwMethod = "String";
                        break;
                    case "GetBool();":
                        rwMethod = "Bool";
                        break;
                    case "GetFloat();":
                        rwMethod = "Float";
                        break;
                    case "GetByte();":
                        rwMethod = "Byte";
                        break;
                    case "1f":
                        rwMethod = null;
                        writeCodeBuffer.AppendLine($"\t\twriter.WriteFloat(1f);");
                        readCodeBuffer.AppendLine($"\t\t{linkedField.ParamNameForField} = 1f;");
                        break;
                    case "SyncStateId.Deserialize(reader);":
                    case "Deserialize();":
                        // INetSerializable
                        break;
                    default:
                        Debugger.Break();
                        break;
                }

                if (rwMethod != null)
                {
                    writeCodeBuffer.AppendLine($"\t\twriter.Write{rwMethod}({linkedField.ParamNameForField});");
                    readCodeBuffer.AppendLine($"\t\t{linkedField.ParamNameForField} = reader.Read{rwMethod}();");
                }
            }
        }
        else
        {
            writeCodeBuffer.AppendLine("\t\tthrow new NotImplementedException(); // TODO");
            readCodeBuffer.AppendLine("\t\tthrow new NotImplementedException(); // TODO");
        }
        
        writeCodeBuffer.AppendLine("\t}");
        sw.WriteLine(writeCodeBuffer);
        
        readCodeBuffer.AppendLine("\t}");
        sw.Write(readCodeBuffer);
        
        // End of class and file
        sw.Write("}");
        sw.Close();
    }
}