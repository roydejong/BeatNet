using System.Text;
using BeatNet.CodeGen.Analysis.ResultData;
using BeatNet.CodeGen.Generator.Util;

namespace BeatNet.CodeGen.Generator;

public class PacketGenerator
{
    public readonly PacketResult Packet;
    
    public PacketGenerator(PacketResult packet)
    {
        Packet = packet;
    }

    public void Generate(GeneratorSettings gs)
    {
        if (Packet.Fields.Count == 0)
            return;
        
        var targetNamespace = $"{gs.BaseNamespace}.Packet";
        var targetDir = Path.Combine(gs.OutputPath, "Packet");
        
        if (!Directory.Exists(targetDir))
            Directory.CreateDirectory(targetDir);
        
        var targetFile = Path.Combine(targetDir, $"{Packet.PacketName}.cs");
        
        using var sw = new StreamWriter(targetFile);
        
        sw.WriteLine("// This file was generated by BeatNet.CodeGen (PacketGenerator)");
        sw.WriteLine("// Do not modify manually");
        sw.WriteLine();
        sw.WriteLine("using BeatNet.Lib.Net;");
        sw.WriteLine("using BeatNet.Lib.Net.IO;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Common;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.Enum;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.NetSerializable;");
        sw.WriteLine();
        sw.WriteLine($"namespace {targetNamespace};");
        sw.WriteLine();
        sw.WriteLine($"public sealed class {Packet.PacketName} : INetSerializable");
        sw.WriteLine("{");
        sw.WriteLine(
            FieldGenerator.GenerateMethods(Packet)
        );
        sw.WriteLine(
            ConstructorGenerator.GenerateConstructor(Packet, false)
        );
        sw.Write(
            ReadWriteMethodGenerator.GenerateMethods(Packet)
        );
        sw.Write("}");
        sw.Close();
    }
}