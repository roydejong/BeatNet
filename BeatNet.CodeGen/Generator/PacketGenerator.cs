using System.Text;
using BeatNet.CodeGen.Analysis.ResultData;
using BeatNet.CodeGen.Generator.Util;

namespace BeatNet.CodeGen.Generator;

public class PacketGenerator
{
    public readonly PacketResult Packet;
    
    public PacketGenerator(PacketResult packet)
    {
        Packet = packet;
    }

    public void Generate(GeneratorSettings gs)
    {
        if (Packet.Fields.Count == 0)
            return;
        
        var targetNamespace = $"{gs.BaseNamespace}.Packet";
        var targetDir = Path.Combine(gs.OutputPath, "Packet");
        
        if (!Directory.Exists(targetDir))
            Directory.CreateDirectory(targetDir);
        
        var targetFile = Path.Combine(targetDir, $"{Packet.PacketName}.cs");
        
        using var sw = new StreamWriter(targetFile);
        
        // Header, usings, namespace, class declaration
        sw.WriteLine("// This file was generated by BeatNet.CodeGen (PacketGenerator)");
        sw.WriteLine("// Do not modify manually");
        sw.WriteLine();
        sw.WriteLine("using BeatNet.Lib.Net;");
        sw.WriteLine("using BeatNet.Lib.Net.IO;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Common;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.Enum;");
        sw.WriteLine("using BeatNet.Lib.BeatSaber.Generated.NetSerializable;");
        sw.WriteLine();
        sw.WriteLine($"namespace {targetNamespace};");
        sw.WriteLine();
        
        sw.WriteLine($"public sealed class {Packet.PacketName} : INetSerializable");
        sw.WriteLine("{");
        
        // RPC Params & Constructor w/ params
        var constructorBuffer = new StringBuilder();
        var constructorBodyBuffer = new StringBuilder();
        
        constructorBuffer.Append($"\tpublic {Packet.PacketName}(");
        
        var paramNo = 0;
        foreach (var field in Packet.Fields.Values)
        {
            if (field.ParamNameForField == "Pool")
                // Ignore static pools from the game
                continue;

            if (field.ParamNameForField == Packet.PacketName)
                // Avoid "Member names cannot be the same as their enclosing type"
                field.ParamName += "Value";
            
            sw.WriteLine($"\tpublic {field.TypeName} {field.ParamNameForField} {{ get; set; }}");
            
            if (paramNo > 0)
                constructorBuffer.Append(", ");
            
            constructorBuffer.Append($"{field.TypeName} {field.ParamNameForArg}");
            constructorBodyBuffer.AppendLine($"\t\t{field.ParamNameForField} = {field.ParamNameForArg};");
            
            paramNo++;
        }
        
        sw.WriteLine();
        constructorBuffer.AppendLine(")");
        constructorBuffer.AppendLine($"\t{{");
        constructorBuffer.Append(constructorBodyBuffer);
        constructorBuffer.AppendLine($"\t}}");
        sw.WriteLine(constructorBuffer);
        
        // Read/write methods
        sw.Write(
            ReadWriteMethodGenerator.GenerateMethods(Packet)
        );
        
        // End of class and file
        sw.Write("}");
        sw.Close();
    }
}