// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.Net;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global

public sealed class GameplayModifiers : INetSerializable
{
	public EnergyType EnergyType { get; set; }
	public bool NoFailOn0Energy { get; set; }
	public bool InstaFail { get; set; }
	public bool FailOnSaberClash { get; set; }
	public EnabledObstacleType EnabledObstacleType { get; set; }
	public bool FastNotes { get; set; }
	public bool StrictAngles { get; set; }
	public bool DisappearingArrows { get; set; }
	public bool GhostNotes { get; set; }
	public bool NoBombs { get; set; }
	public SongSpeed SongSpeed { get; set; }
	public bool NoArrows { get; set; }
	public bool ProMode { get; set; }
	public bool ZenMode { get; set; }
	public bool SmallCubes { get; set; }

	public GameplayModifiers(EnergyType energyType, bool noFailOn0Energy, bool instaFail, bool failOnSaberClash, EnabledObstacleType enabledObstacleType, bool fastNotes, bool strictAngles, bool disappearingArrows, bool ghostNotes, bool noBombs, SongSpeed songSpeed, bool noArrows, bool proMode, bool zenMode, bool smallCubes)
	{
		EnergyType = energyType;
		NoFailOn0Energy = noFailOn0Energy;
		InstaFail = instaFail;
		FailOnSaberClash = failOnSaberClash;
		EnabledObstacleType = enabledObstacleType;
		FastNotes = fastNotes;
		StrictAngles = strictAngles;
		DisappearingArrows = disappearingArrows;
		GhostNotes = ghostNotes;
		NoBombs = noBombs;
		SongSpeed = songSpeed;
		NoArrows = noArrows;
		ProMode = proMode;
		ZenMode = zenMode;
		SmallCubes = smallCubes;
	}

	public void WriteTo(ref NetWriter writer)
	{
		// GameplayModifiersFixedImpl
		var packed = 0;
		packed |= (int)(EnergyType & (EnergyType)15) << 0;
		packed |= InstaFail ? 1 << 6 : 0;
		packed |= FailOnSaberClash ? 1 << 7 : 0;
		packed |= (int)(EnabledObstacleType & (EnabledObstacleType)15) << 8;
		packed |= NoBombs ? 1 << 13 : 0;
		packed |= FastNotes ? 1 << 14 : 0;
		packed |= StrictAngles ? 1 << 15 : 0;
		packed |= DisappearingArrows ? 1 << 16 : 0;
		packed |= GhostNotes ? 1 << 17 : 0;
		packed |= (int)(SongSpeed & (SongSpeed)15) << 18;
		packed |= NoArrows ? 1 << 22 : 0;
		packed |= NoFailOn0Energy ? 1 << 23 : 0;
		packed |= ProMode ? 1 << 24 : 0;
		packed |= ZenMode ? 1 << 25 : 0;
		packed |= SmallCubes ? 1 << 26 : 0;
		writer.WriteInt(packed);
	}

	public void ReadFrom(ref NetReader reader)
	{
		// GameplayModifiersFixedImpl
		var packed = reader.ReadInt();
		EnergyType = (EnergyType)((packed >> 0) & 15);
		InstaFail = (packed & (1 << 6)) != 0;
		FailOnSaberClash = (packed & (1 << 7)) != 0;
		EnabledObstacleType = (EnabledObstacleType)((packed >> 8) & 15);
		NoBombs = (packed & (1 << 13)) != 0;
		FastNotes = (packed & (1 << 14)) != 0;
		StrictAngles = (packed & (1 << 15)) != 0;
		DisappearingArrows = (packed & (1 << 16)) != 0;
		GhostNotes = (packed & (1 << 17)) != 0;
		SongSpeed = (SongSpeed)((packed >> 18) & 15);
		NoArrows = (packed & (1 << 22)) != 0;
		NoFailOn0Energy = (packed & (1 << 23)) != 0;
		ProMode = (packed & (1 << 24)) != 0;
		ZenMode = (packed & (1 << 25)) != 0;
		SmallCubes = (packed & (1 << 26)) != 0;
	}
}