// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.Net.Interfaces;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global
public sealed class LevelCompletionResults : INetSerializable
{
	public GameplayModifiers GameplayModifiers { get; set; }
	public int ModifiedScore { get; set; }
	public int MultipliedScore { get; set; }
	public Rank Rank { get; set; }
	public bool FullCombo { get; set; }
	public float LeftSaberMovementDistance { get; set; }
	public float RightSaberMovementDistance { get; set; }
	public float LeftHandMovementDistance { get; set; }
	public float RightHandMovementDistance { get; set; }
	public LevelEndStateType LevelEndStateType { get; set; }
	public LevelEndAction LevelEndAction { get; set; }
	public float Energy { get; set; }
	public int GoodCutsCount { get; set; }
	public int BadCutsCount { get; set; }
	public int MissedCount { get; set; }
	public int NotGoodCount { get; set; }
	public int OkCount { get; set; }
	public int MaxCutScore { get; set; }
	public int TotalCutScore { get; set; }
	public int GoodCutsCountForNotesWithFullScoreScoringType { get; set; }
	public float AverageCenterDistanceCutScoreForNotesWithFullScoreScoringType { get; set; }
	public float AverageCutScoreForNotesWithFullScoreScoringType { get; set; }
	public int MaxCombo { get; set; }
	public float EndSongTime { get; set; }

	public LevelCompletionResults(GameplayModifiers gameplayModifiers, int modifiedScore, int multipliedScore, Rank rank, bool fullCombo, float leftSaberMovementDistance, float rightSaberMovementDistance, float leftHandMovementDistance, float rightHandMovementDistance, LevelEndStateType levelEndStateType, LevelEndAction levelEndAction, float energy, int goodCutsCount, int badCutsCount, int missedCount, int notGoodCount, int okCount, int maxCutScore, int totalCutScore, int goodCutsCountForNotesWithFullScoreScoringType, float averageCenterDistanceCutScoreForNotesWithFullScoreScoringType, float averageCutScoreForNotesWithFullScoreScoringType, int maxCombo, float endSongTime)
	{
		GameplayModifiers = gameplayModifiers;
		ModifiedScore = modifiedScore;
		MultipliedScore = multipliedScore;
		Rank = rank;
		FullCombo = fullCombo;
		LeftSaberMovementDistance = leftSaberMovementDistance;
		RightSaberMovementDistance = rightSaberMovementDistance;
		LeftHandMovementDistance = leftHandMovementDistance;
		RightHandMovementDistance = rightHandMovementDistance;
		LevelEndStateType = levelEndStateType;
		LevelEndAction = levelEndAction;
		Energy = energy;
		GoodCutsCount = goodCutsCount;
		BadCutsCount = badCutsCount;
		MissedCount = missedCount;
		NotGoodCount = notGoodCount;
		OkCount = okCount;
		MaxCutScore = maxCutScore;
		TotalCutScore = totalCutScore;
		GoodCutsCountForNotesWithFullScoreScoringType = goodCutsCountForNotesWithFullScoreScoringType;
		AverageCenterDistanceCutScoreForNotesWithFullScoreScoringType = averageCenterDistanceCutScoreForNotesWithFullScoreScoringType;
		AverageCutScoreForNotesWithFullScoreScoringType = averageCutScoreForNotesWithFullScoreScoringType;
		MaxCombo = maxCombo;
		EndSongTime = endSongTime;
	}

	public void WriteTo(ref NetWriter writer)
	{
		writer.WriteVarInt((int)ModifiedScore);
		writer.WriteVarInt((int)MultipliedScore);
		writer.WriteVarInt((int)Rank);
		writer.WriteBool(FullCombo);
		writer.WriteFloat((float)LeftSaberMovementDistance);
		writer.WriteFloat((float)RightSaberMovementDistance);
		writer.WriteFloat((float)LeftHandMovementDistance);
		writer.WriteFloat((float)RightHandMovementDistance);
		writer.WriteVarInt((int)LevelEndStateType);
		writer.WriteVarInt((int)LevelEndAction);
		writer.WriteFloat((float)Energy);
		writer.WriteVarInt((int)GoodCutsCount);
		writer.WriteVarInt((int)BadCutsCount);
		writer.WriteVarInt((int)MissedCount);
		writer.WriteVarInt((int)NotGoodCount);
		writer.WriteVarInt((int)OkCount);
		writer.WriteVarInt((int)MaxCutScore);
		writer.WriteVarInt((int)TotalCutScore);
		writer.WriteVarInt((int)GoodCutsCountForNotesWithFullScoreScoringType);
		writer.WriteFloat((float)AverageCenterDistanceCutScoreForNotesWithFullScoreScoringType);
		writer.WriteFloat((float)AverageCutScoreForNotesWithFullScoreScoringType);
		writer.WriteVarInt((int)MaxCombo);
		writer.WriteFloat((float)EndSongTime);
	}

	public void ReadFrom(ref NetReader reader)
	{
		ModifiedScore = (int)reader.ReadVarInt();
		MultipliedScore = (int)reader.ReadVarInt();
		Rank = (Rank)reader.ReadVarInt();
		FullCombo = (bool)reader.ReadBool();
		LeftSaberMovementDistance = (float)reader.ReadFloat();
		RightSaberMovementDistance = (float)reader.ReadFloat();
		LeftHandMovementDistance = (float)reader.ReadFloat();
		RightHandMovementDistance = (float)reader.ReadFloat();
		LevelEndStateType = (LevelEndStateType)reader.ReadVarInt();
		LevelEndAction = (LevelEndAction)reader.ReadVarInt();
		Energy = (float)reader.ReadFloat();
		GoodCutsCount = (int)reader.ReadVarInt();
		BadCutsCount = (int)reader.ReadVarInt();
		MissedCount = (int)reader.ReadVarInt();
		NotGoodCount = (int)reader.ReadVarInt();
		OkCount = (int)reader.ReadVarInt();
		MaxCutScore = (int)reader.ReadVarInt();
		TotalCutScore = (int)reader.ReadVarInt();
		GoodCutsCountForNotesWithFullScoreScoringType = (int)reader.ReadVarInt();
		AverageCenterDistanceCutScoreForNotesWithFullScoreScoringType = (float)reader.ReadFloat();
		AverageCutScoreForNotesWithFullScoreScoringType = (float)reader.ReadFloat();
		MaxCombo = (int)reader.ReadVarInt();
		EndSongTime = (float)reader.ReadFloat();
	}
}