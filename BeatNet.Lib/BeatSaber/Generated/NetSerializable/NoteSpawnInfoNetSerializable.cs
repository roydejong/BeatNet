// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.Net.Interfaces;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global
public sealed class NoteSpawnInfoNetSerializable : INetSerializable
{
	public float Time { get; set; }
	public float Beat { get; set; }
	public int LineIndex { get; set; }
	public NoteLineLayer NoteLineLayer { get; set; }
	public NoteLineLayer BeforeJumpNoteLineLayer { get; set; }
	public GameplayType GameplayType { get; set; }
	public ScoringType ScoringType { get; set; }
	public ColorType ColorType { get; set; }
	public NoteCutDirection CutDirection { get; set; }
	public float TimeToNextColorNote { get; set; }
	public float TimeToPrevColorNote { get; set; }
	public int FlipLineIndex { get; set; }
	public float FlipYSide { get; set; }
	public Vector3Serializable MoveStartOffset { get; set; }
	public Vector3Serializable MoveEndOffset { get; set; }
	public Vector3Serializable JumpEndOffset { get; set; }
	public float GravityBase { get; set; }
	public float Rotation { get; set; }
	public float CutDirectionAngleOffset { get; set; }
	public float CutSfxVolumeMultiplier { get; set; }

	public NoteSpawnInfoNetSerializable(float time, float beat, int lineIndex, NoteLineLayer noteLineLayer, NoteLineLayer beforeJumpNoteLineLayer, GameplayType gameplayType, ScoringType scoringType, ColorType colorType, NoteCutDirection cutDirection, float timeToNextColorNote, float timeToPrevColorNote, int flipLineIndex, float flipYSide, Vector3Serializable moveStartOffset, Vector3Serializable moveEndOffset, Vector3Serializable jumpEndOffset, float gravityBase, float rotation, float cutDirectionAngleOffset, float cutSfxVolumeMultiplier)
	{
		Time = time;
		Beat = beat;
		LineIndex = lineIndex;
		NoteLineLayer = noteLineLayer;
		BeforeJumpNoteLineLayer = beforeJumpNoteLineLayer;
		GameplayType = gameplayType;
		ScoringType = scoringType;
		ColorType = colorType;
		CutDirection = cutDirection;
		TimeToNextColorNote = timeToNextColorNote;
		TimeToPrevColorNote = timeToPrevColorNote;
		FlipLineIndex = flipLineIndex;
		FlipYSide = flipYSide;
		MoveStartOffset = moveStartOffset;
		MoveEndOffset = moveEndOffset;
		JumpEndOffset = jumpEndOffset;
		GravityBase = gravityBase;
		Rotation = rotation;
		CutDirectionAngleOffset = cutDirectionAngleOffset;
		CutSfxVolumeMultiplier = cutSfxVolumeMultiplier;
	}

	public void WriteTo(ref NetWriter writer)
	{
		writer.WriteFloat(Time);
		writer.WriteVarInt(LineIndex);
		writer.WriteVarInt((int)NoteLineLayer);
		writer.WriteVarInt((int)BeforeJumpNoteLineLayer);
		writer.WriteVarInt((int)GameplayType);
		writer.WriteVarInt((int)ScoringType);
		writer.WriteVarInt((int)ColorType);
		writer.WriteVarInt((int)CutDirection);
		writer.WriteFloat(TimeToNextColorNote);
		writer.WriteFloat(TimeToPrevColorNote);
		writer.WriteVarInt(FlipLineIndex);
		writer.WriteVarInt((int)FlipYSide);
		writer.WriteSerializable<Vector3Serializable>(MoveStartOffset);
		writer.WriteSerializable<Vector3Serializable>(MoveEndOffset);
		writer.WriteSerializable<Vector3Serializable>(JumpEndOffset);
		writer.WriteFloat(GravityBase);
		writer.WriteFloat(Rotation);
		writer.WriteFloat(CutDirectionAngleOffset);
		writer.WriteFloat(CutSfxVolumeMultiplier);
	}

	public void ReadFrom(ref NetReader reader)
	{
		Time = reader.ReadFloat();
		LineIndex = reader.ReadVarInt();
		NoteLineLayer = (NoteLineLayer)reader.ReadVarInt();
		BeforeJumpNoteLineLayer = (NoteLineLayer)reader.ReadVarInt();
		GameplayType = (GameplayType)reader.ReadVarInt();
		ScoringType = (ScoringType)reader.ReadVarInt();
		ColorType = (ColorType)reader.ReadVarInt();
		CutDirection = (NoteCutDirection)reader.ReadVarInt();
		TimeToNextColorNote = reader.ReadFloat();
		TimeToPrevColorNote = reader.ReadFloat();
		FlipLineIndex = reader.ReadVarInt();
		FlipYSide = (float)reader.ReadVarInt();
		MoveStartOffset = reader.ReadSerializable<Vector3Serializable>();
		MoveEndOffset = reader.ReadSerializable<Vector3Serializable>();
		JumpEndOffset = reader.ReadSerializable<Vector3Serializable>();
		GravityBase = reader.ReadFloat();
		Rotation = reader.ReadFloat();
		CutDirectionAngleOffset = reader.ReadFloat();
		CutSfxVolumeMultiplier = reader.ReadFloat();
	}
}