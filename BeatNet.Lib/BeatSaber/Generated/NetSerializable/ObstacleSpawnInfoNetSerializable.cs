// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.Net.Interfaces;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global
public sealed class ObstacleSpawnInfoNetSerializable : INetSerializable
{
	public float Time { get; set; }
	public int LineIndex { get; set; }
	public NoteLineLayer LineLayer { get; set; }
	public float Duration { get; set; }
	public int Width { get; set; }
	public int Height { get; set; }
	public Vector3Serializable MoveStartPos { get; set; }
	public Vector3Serializable MoveEndPos { get; set; }
	public Vector3Serializable JumpEndPos { get; set; }
	public float ObstacleHeight { get; set; }
	public float MoveDuration { get; set; }
	public float JumpDuration { get; set; }
	public float NoteLinesDistance { get; set; }
	public float Rotation { get; set; }

	public ObstacleSpawnInfoNetSerializable(float time, int lineIndex, NoteLineLayer lineLayer, float duration, int width, int height, Vector3Serializable moveStartPos, Vector3Serializable moveEndPos, Vector3Serializable jumpEndPos, float obstacleHeight, float moveDuration, float jumpDuration, float noteLinesDistance, float rotation)
	{
		Time = time;
		LineIndex = lineIndex;
		LineLayer = lineLayer;
		Duration = duration;
		Width = width;
		Height = height;
		MoveStartPos = moveStartPos;
		MoveEndPos = moveEndPos;
		JumpEndPos = jumpEndPos;
		ObstacleHeight = obstacleHeight;
		MoveDuration = moveDuration;
		JumpDuration = jumpDuration;
		NoteLinesDistance = noteLinesDistance;
		Rotation = rotation;
	}

	public void WriteTo(ref NetWriter writer)
	{
		writer.WriteFloat(Time);
		writer.WriteVarInt(LineIndex);
		writer.WriteVarInt((int)LineLayer);
		writer.WriteFloat(Duration);
		writer.WriteVarInt(Width);
		writer.WriteVarInt(Height);
		writer.WriteSerializable<Vector3Serializable>(MoveStartPos);
		writer.WriteSerializable<Vector3Serializable>(MoveEndPos);
		writer.WriteSerializable<Vector3Serializable>(JumpEndPos);
		writer.WriteFloat(ObstacleHeight);
		writer.WriteFloat(MoveDuration);
		writer.WriteFloat(JumpDuration);
		writer.WriteFloat(NoteLinesDistance);
		writer.WriteFloat(Rotation);
	}

	public void ReadFrom(ref NetReader reader)
	{
		Time = reader.ReadFloat();
		LineIndex = reader.ReadVarInt();
		LineLayer = (NoteLineLayer)reader.ReadVarInt();
		Duration = reader.ReadFloat();
		Width = reader.ReadVarInt();
		Height = reader.ReadVarInt();
		MoveStartPos = reader.ReadSerializable<Vector3Serializable>();
		MoveEndPos = reader.ReadSerializable<Vector3Serializable>();
		JumpEndPos = reader.ReadSerializable<Vector3Serializable>();
		ObstacleHeight = reader.ReadFloat();
		MoveDuration = reader.ReadFloat();
		JumpDuration = reader.ReadFloat();
		NoteLinesDistance = reader.ReadFloat();
		Rotation = reader.ReadFloat();
	}
}