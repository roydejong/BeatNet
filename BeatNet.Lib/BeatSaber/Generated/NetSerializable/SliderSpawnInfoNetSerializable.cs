// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.Net.Interfaces;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global
public sealed class SliderSpawnInfoNetSerializable : INetSerializable
{
	public ColorType ColorType { get; set; }
	public SliderType SliderType { get; set; }
	public bool HasHeadNote { get; set; }
	public float HeadTime { get; set; }
	public float HeadBeat { get; set; }
	public int HeadLineIndex { get; set; }
	public NoteLineLayer HeadLineLayer { get; set; }
	public NoteLineLayer HeadBeforeJumpLineLayer { get; set; }
	public float HeadControlPointLengthMultiplier { get; set; }
	public NoteCutDirection HeadCutDirection { get; set; }
	public float HeadCutDirectionAngleOffset { get; set; }
	public bool HasTailNote { get; set; }
	public float TailTime { get; set; }
	public int TailLineIndex { get; set; }
	public NoteLineLayer TailLineLayer { get; set; }
	public NoteLineLayer TailBeforeJumpLineLayer { get; set; }
	public float TailControlPointLengthMultiplier { get; set; }
	public NoteCutDirection TailCutDirection { get; set; }
	public float TailCutDirectionAngleOffset { get; set; }
	public SliderMidAnchorMode MidAnchorMode { get; set; }
	public int SliceCount { get; set; }
	public float SquishAmount { get; set; }
	public Vector3Serializable HeadNoteOffset { get; set; }
	public float HeadGravityBase { get; set; }
	public Vector3Serializable TailNoteOffset { get; set; }
	public float TailGravityBase { get; set; }
	public float Rotation { get; set; }

	public SliderSpawnInfoNetSerializable(ColorType colorType, SliderType sliderType, bool hasHeadNote, float headTime, float headBeat, int headLineIndex, NoteLineLayer headLineLayer, NoteLineLayer headBeforeJumpLineLayer, float headControlPointLengthMultiplier, NoteCutDirection headCutDirection, float headCutDirectionAngleOffset, bool hasTailNote, float tailTime, int tailLineIndex, NoteLineLayer tailLineLayer, NoteLineLayer tailBeforeJumpLineLayer, float tailControlPointLengthMultiplier, NoteCutDirection tailCutDirection, float tailCutDirectionAngleOffset, SliderMidAnchorMode midAnchorMode, int sliceCount, float squishAmount, Vector3Serializable headNoteOffset, float headGravityBase, Vector3Serializable tailNoteOffset, float tailGravityBase, float rotation)
	{
		ColorType = colorType;
		SliderType = sliderType;
		HasHeadNote = hasHeadNote;
		HeadTime = headTime;
		HeadBeat = headBeat;
		HeadLineIndex = headLineIndex;
		HeadLineLayer = headLineLayer;
		HeadBeforeJumpLineLayer = headBeforeJumpLineLayer;
		HeadControlPointLengthMultiplier = headControlPointLengthMultiplier;
		HeadCutDirection = headCutDirection;
		HeadCutDirectionAngleOffset = headCutDirectionAngleOffset;
		HasTailNote = hasTailNote;
		TailTime = tailTime;
		TailLineIndex = tailLineIndex;
		TailLineLayer = tailLineLayer;
		TailBeforeJumpLineLayer = tailBeforeJumpLineLayer;
		TailControlPointLengthMultiplier = tailControlPointLengthMultiplier;
		TailCutDirection = tailCutDirection;
		TailCutDirectionAngleOffset = tailCutDirectionAngleOffset;
		MidAnchorMode = midAnchorMode;
		SliceCount = sliceCount;
		SquishAmount = squishAmount;
		HeadNoteOffset = headNoteOffset;
		HeadGravityBase = headGravityBase;
		TailNoteOffset = tailNoteOffset;
		TailGravityBase = tailGravityBase;
		Rotation = rotation;
	}

	public void WriteTo(ref NetWriter writer)
	{
		writer.WriteVarInt((int)ColorType);
		writer.WriteVarInt((int)SliderType);
		writer.WriteBool(HasHeadNote);
		writer.WriteFloat(HeadTime);
		writer.WriteVarInt(HeadLineIndex);
		writer.WriteVarInt((int)HeadLineLayer);
		writer.WriteVarInt((int)HeadBeforeJumpLineLayer);
		writer.WriteFloat(HeadControlPointLengthMultiplier);
		writer.WriteVarInt((int)HeadCutDirection);
		writer.WriteFloat(HeadCutDirectionAngleOffset);
		writer.WriteBool(HasTailNote);
		writer.WriteFloat(TailTime);
		writer.WriteVarInt(TailLineIndex);
		writer.WriteVarInt((int)TailLineLayer);
		writer.WriteVarInt((int)TailBeforeJumpLineLayer);
		writer.WriteFloat(TailControlPointLengthMultiplier);
		writer.WriteVarInt((int)TailCutDirection);
		writer.WriteFloat(TailCutDirectionAngleOffset);
		writer.WriteVarInt((int)MidAnchorMode);
		writer.WriteVarInt(SliceCount);
		writer.WriteFloat(SquishAmount);
		writer.WriteSerializable<Vector3Serializable>(HeadNoteOffset);
		writer.WriteFloat(HeadGravityBase);
		writer.WriteSerializable<Vector3Serializable>(TailNoteOffset);
		writer.WriteFloat(TailGravityBase);
		writer.WriteFloat(Rotation);
	}

	public void ReadFrom(ref NetReader reader)
	{
		ColorType = (ColorType)reader.ReadVarInt();
		SliderType = (SliderType)reader.ReadVarInt();
		HasHeadNote = reader.ReadBool();
		HeadTime = reader.ReadFloat();
		HeadLineIndex = reader.ReadVarInt();
		HeadLineLayer = (NoteLineLayer)reader.ReadVarInt();
		HeadBeforeJumpLineLayer = (NoteLineLayer)reader.ReadVarInt();
		HeadControlPointLengthMultiplier = reader.ReadFloat();
		HeadCutDirection = (NoteCutDirection)reader.ReadVarInt();
		HeadCutDirectionAngleOffset = reader.ReadFloat();
		HasTailNote = reader.ReadBool();
		TailTime = reader.ReadFloat();
		TailLineIndex = reader.ReadVarInt();
		TailLineLayer = (NoteLineLayer)reader.ReadVarInt();
		TailBeforeJumpLineLayer = (NoteLineLayer)reader.ReadVarInt();
		TailControlPointLengthMultiplier = reader.ReadFloat();
		TailCutDirection = (NoteCutDirection)reader.ReadVarInt();
		TailCutDirectionAngleOffset = reader.ReadFloat();
		MidAnchorMode = (SliderMidAnchorMode)reader.ReadVarInt();
		SliceCount = reader.ReadVarInt();
		SquishAmount = reader.ReadFloat();
		HeadNoteOffset = reader.ReadSerializable<Vector3Serializable>();
		HeadGravityBase = reader.ReadFloat();
		TailNoteOffset = reader.ReadSerializable<Vector3Serializable>();
		TailGravityBase = reader.ReadFloat();
		Rotation = reader.ReadFloat();
	}
}