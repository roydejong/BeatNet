// This file was generated by BeatNet.CodeGen (NetSerializableGenerator)
// Do not modify manually

using System;
using BeatNet.Lib.BeatSaber.Generated.Enum;

namespace BeatNet.Lib.BeatSaber.Generated.NetSerializable;

public sealed class SliderSpawnInfoNetSerializable
{
	public ColorType ColorType { get; set; }
	public Type SliderType { get; set; }
	public bool HasHeadNote { get; set; }
	public float HeadTime { get; set; }
	public int HeadLineIndex { get; set; }
	public NoteLineLayer HeadLineLayer { get; set; }
	public NoteLineLayer HeadBeforeJumpLineLayer { get; set; }
	public float HeadControlPointLengthMultiplier { get; set; }
	public NoteCutDirection HeadCutDirection { get; set; }
	public float HeadCutDirectionAngleOffset { get; set; }
	public bool HasTailNote { get; set; }
	public float TailTime { get; set; }
	public int TailLineIndex { get; set; }
	public NoteLineLayer TailLineLayer { get; set; }
	public NoteLineLayer TailBeforeJumpLineLayer { get; set; }
	public float TailControlPointLengthMultiplier { get; set; }
	public NoteCutDirection TailCutDirection { get; set; }
	public float TailCutDirectionAngleOffset { get; set; }
	public SliderMidAnchorMode MidAnchorMode { get; set; }
	public int SliceCount { get; set; }
	public float SquishAmount { get; set; }
	public Vector3Serializable HeadMoveStartPos { get; set; }
	public Vector3Serializable HeadJumpStartPos { get; set; }
	public Vector3Serializable HeadJumpEndPos { get; set; }
	public float HeadJumpGravity { get; set; }
	public Vector3Serializable TailMoveStartPos { get; set; }
	public Vector3Serializable TailJumpStartPos { get; set; }
	public Vector3Serializable TailJumpEndPos { get; set; }
	public float TailJumpGravity { get; set; }
	public float MoveDuration { get; set; }
	public float JumpDuration { get; set; }
	public float Rotation { get; set; }

	public SliderSpawnInfoNetSerializable(ColorType colorType, Type sliderType, bool hasHeadNote, float headTime, int headLineIndex, NoteLineLayer headLineLayer, NoteLineLayer headBeforeJumpLineLayer, float headControlPointLengthMultiplier, NoteCutDirection headCutDirection, float headCutDirectionAngleOffset, bool hasTailNote, float tailTime, int tailLineIndex, NoteLineLayer tailLineLayer, NoteLineLayer tailBeforeJumpLineLayer, float tailControlPointLengthMultiplier, NoteCutDirection tailCutDirection, float tailCutDirectionAngleOffset, SliderMidAnchorMode midAnchorMode, int sliceCount, float squishAmount, Vector3Serializable headMoveStartPos, Vector3Serializable headJumpStartPos, Vector3Serializable headJumpEndPos, float headJumpGravity, Vector3Serializable tailMoveStartPos, Vector3Serializable tailJumpStartPos, Vector3Serializable tailJumpEndPos, float tailJumpGravity, float moveDuration, float jumpDuration, float rotation)
	{
		ColorType = colorType;
		SliderType = sliderType;
		HasHeadNote = hasHeadNote;
		HeadTime = headTime;
		HeadLineIndex = headLineIndex;
		HeadLineLayer = headLineLayer;
		HeadBeforeJumpLineLayer = headBeforeJumpLineLayer;
		HeadControlPointLengthMultiplier = headControlPointLengthMultiplier;
		HeadCutDirection = headCutDirection;
		HeadCutDirectionAngleOffset = headCutDirectionAngleOffset;
		HasTailNote = hasTailNote;
		TailTime = tailTime;
		TailLineIndex = tailLineIndex;
		TailLineLayer = tailLineLayer;
		TailBeforeJumpLineLayer = tailBeforeJumpLineLayer;
		TailControlPointLengthMultiplier = tailControlPointLengthMultiplier;
		TailCutDirection = tailCutDirection;
		TailCutDirectionAngleOffset = tailCutDirectionAngleOffset;
		MidAnchorMode = midAnchorMode;
		SliceCount = sliceCount;
		SquishAmount = squishAmount;
		HeadMoveStartPos = headMoveStartPos;
		HeadJumpStartPos = headJumpStartPos;
		HeadJumpEndPos = headJumpEndPos;
		HeadJumpGravity = headJumpGravity;
		TailMoveStartPos = tailMoveStartPos;
		TailJumpStartPos = tailJumpStartPos;
		TailJumpEndPos = tailJumpEndPos;
		TailJumpGravity = tailJumpGravity;
		MoveDuration = moveDuration;
		JumpDuration = jumpDuration;
		Rotation = rotation;
	}
}