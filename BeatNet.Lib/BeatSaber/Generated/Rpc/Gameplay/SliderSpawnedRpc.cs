// This file was generated by BeatNet.CodeGen (RpcGenerator)
// Do not modify manually

using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Rpc;
using BeatNet.Lib.BeatSaber.Generated.Enum;
using BeatNet.Lib.BeatSaber.Generated.NetSerializable;

namespace BeatNet.Lib.BeatSaber.Generated.Rpc.Gameplay;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global

public sealed class SliderSpawnedRpc : BaseRpc
{
	public override byte RpcType => (byte)GameplayRpcType.SliderSpawned;

	public float? SongTime { get; set; } = null;
	public SliderSpawnInfoNetSerializable? SliderSpawnInfoNetSerializable { get; set; } = null;

	public SliderSpawnedRpc(float? songTime = null, SliderSpawnInfoNetSerializable? sliderSpawnInfoNetSerializable = null)
	{
		SongTime = songTime;
		SliderSpawnInfoNetSerializable = sliderSpawnInfoNetSerializable;
	}

	public override void WriteTo(ref NetWriter writer)
	{
		base.WriteTo(ref writer);

		var nullFlags = (byte)(
			(SongTime != null ? 1 : 0) | 
			(SliderSpawnInfoNetSerializable != null ? 2 : 0)
		);

		writer.WriteByte(nullFlags);

		if (SongTime != null)
			writer.WriteFloat(SongTime.Value);

		if (SliderSpawnInfoNetSerializable != null)
			writer.WriteSerializable<SliderSpawnInfoNetSerializable>(SliderSpawnInfoNetSerializable);
	}

	public override void ReadFrom(ref NetReader reader)
	{
		base.ReadFrom(ref reader);

		var nullFlags = reader.ReadByte();

		if ((nullFlags & (1 << 0)) != 0)
			SongTime = reader.ReadFloat();
		else
			SongTime = null;

		if ((nullFlags & (1 << 1)) != 0)
			SliderSpawnInfoNetSerializable = reader.ReadSerializable<SliderSpawnInfoNetSerializable>();
		else
			SliderSpawnInfoNetSerializable = null;
	}
}