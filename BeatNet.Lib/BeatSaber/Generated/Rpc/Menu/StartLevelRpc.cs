// This file was generated by BeatNet.CodeGen (RpcGenerator)
// Do not modify manually

using BeatNet.Lib.Net.Interfaces;
using BeatNet.Lib.Net.IO;
using BeatNet.Lib.BeatSaber.Common;
using BeatNet.Lib.BeatSaber.Generated.Enum;
using BeatNet.Lib.BeatSaber.Generated.NetSerializable;

namespace BeatNet.Lib.BeatSaber.Generated.Rpc.Menu;

// ReSharper disable InconsistentNaming IdentifierTypo ClassNeverInstantiated.Global MemberCanBePrivate.Global
public sealed class StartLevelRpc : BaseMenuRpc
{
	public override MenuRpcType RpcType => MenuRpcType.StartLevel;

	public BeatmapKeyNetSerializable? BeatmapKeySerializable { get; set; } = null;
	public GameplayModifiers? GameplayModifiers { get; set; } = null;
	public long? StartTime { get; set; } = null;

	public StartLevelRpc(BeatmapKeyNetSerializable? beatmapKeySerializable = null, GameplayModifiers? gameplayModifiers = null, long? startTime = null)
	{
		BeatmapKeySerializable = beatmapKeySerializable;
		GameplayModifiers = gameplayModifiers;
		StartTime = startTime;
	}

	public override void WriteTo(ref NetWriter writer)
	{
		base.WriteTo(ref writer);

		var nullFlags = (byte)(
			(BeatmapKeySerializable != null ? 1 : 0) | 
			(GameplayModifiers != null ? 2 : 0) | 
			(StartTime != null ? 4 : 0)
		);

		writer.WriteByte(nullFlags);

		if (BeatmapKeySerializable != null)
			writer.WriteSerializable<BeatmapKeyNetSerializable>(BeatmapKeySerializable);

		if (GameplayModifiers != null)
			writer.WriteSerializable<GameplayModifiers>(GameplayModifiers);

		if (StartTime != null)
			writer.WriteVarLong(StartTime.Value);
	}

	public override void ReadFrom(ref NetReader reader)
	{
		base.ReadFrom(ref reader);

		var nullFlags = reader.ReadByte();

		if ((nullFlags & (1 << 0)) != 0)
			BeatmapKeySerializable = reader.ReadSerializable<BeatmapKeyNetSerializable>();
		else
			BeatmapKeySerializable = null;

		if ((nullFlags & (1 << 1)) != 0)
			GameplayModifiers = reader.ReadSerializable<GameplayModifiers>();
		else
			GameplayModifiers = null;

		if ((nullFlags & (1 << 2)) != 0)
			StartTime = reader.ReadVarLong();
		else
			StartTime = null;
	}
}